<?xml version="1.0" encoding="utf-8"?>
<topic id="7e07e290-7738-4d8b-bcf1-8eb4b33706b0" revisionNumber="1">
	<developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

		<introduction>
			<autoOutline />
		</introduction>

		<section address="Features">
			<title>Image Map Features</title>
			<content>
				<para>The image map controls allow you to define hot spots on an image and perform an action when a
defined area is clicked.  A Windows Forms and a web server image map control are included.  Each contains a
similar set of core features:
				</para>

				<list class="bullet">
					<listItem>
						<para>All of the standard image types are supported (BMP, JPEG, GIF, etc.).</para>
					</listItem>

					<listItem>
						<para>Support for animation is included for those image types that use it such as GIF.</para>
					</listItem>

					<listItem>
						<para>The image's display height and width can be customized.</para>
					</listItem>

					<listItem>
						<para>Image areas can be defined using rectangles, circles, or polygons of any shape defined by a set
of points.</para>
					</listItem>

					<listItem>
						<para>Tab order and validation events are supported.</para>
					</listItem>

					<listItem>
						<para>Image areas can be triggered by clicking on them with the mouse or by tabbing to them and
hitting the Enter key.</para>
					</listItem>

					<listItem>
						<para>Image areas support a <codeInline>Tag</codeInline> property so that you can associate
user-defined information with each image area.</para>
					</listItem>

					<listItem>
						<para>Both provide full design-time support including a graphical image area selection tool that
saves you from having to manually determine and type in the area coordinates.</para>
					</listItem>

				</list>

			</content>
		</section>

		<section address="WebServerCtl">
			<title>Web Server Image Map Control</title>
			<content>
				<para>The web server image map control renders a client-side image map that supports all of the expected
features including:</para>

				<list class="bullet">
					<listItem>
						<para>Tool tip (alternate) text can be defined for each image area.</para>
					</listItem>

					<listItem>
						<para>An access key can be defined to select an image area by pressing <legacyBold>Alt</legacyBold>
plus the defined access key.</para>
					</listItem>

					<listItem>
						<para>Image areas can be enabled or disabled.</para>
					</listItem>

					<listItem>
						<para>The action can be set to navigate to a URL (the default), post back to the server to fire a
<codeInline>Click</codeInline> event, or to do nothing and just display a tool tip if one is specified.</para>
					</listItem>

					<listItem>
						<para>When set to navigate, the target window can be defined to open the URL in a new or existing
browser window.</para>
					</listItem>

					<listItem>
						<para>The navigate action can be used to execute client-side script.</para>
					</listItem>

					<listItem>
						<para>When set to post back, the event handler receives the index of the clicked area and the
coordinates of the click if supported.</para>
					</listItem>

					<listItem>
						<para>Custom attributes are supported to define additional behavior such as <codeInline>onmouseover</codeInline>
events, etc.</para>
					</listItem>

					<listItem>
						<para>The image map and its areas also support view state so changes made to the controls across post
backs are retained.  This also allows you to define dynamic image areas once at page creation and have them
available across post backs without having to recreate them every time.</para>
					</listItem>
				</list>

				<para>The standard image map control supplied with ASP.NET lacks many of the features listed above and
also lacks the superior design-time support found in the <codeInline>EWSoftware.ImageMaps</codeInline> control.
The web server image map control has been tested in Internet Explorer, Firefox, and Chrome.  It also works well
in earlier versions of those browsers and should work well in any other browser that provides support for
client-side image maps.</para>

			</content>
		</section>

		<section address="WinFormsCtl">
			<title>Windows Forms Image Map Control</title>
			<content>
				<para>The Windows Forms image map control provides a similar control for rich client applications.  It
displays the selected image within its bounds and provides the following features:
				</para>

				<list class="bullet">
					<listItem>
						<para>Scrolling is supported for displaying images larger than the bounds of the control.</para>
					</listItem>

					<listItem>
						<para>For images smaller than the control, it can be set to center the image within itself or shrink
its bounds to fit the image.</para>
					</listItem>

					<listItem>
						<para>Tool tip text can be defined for each image area.</para>
					</listItem>

					<listItem>
						<para>An access key can be defined to select an image area by pressing <legacyBold>Alt</legacyBold>
plus the defined access key.</para>
					</listItem>

					<listItem>
						<para>Tab indexes can be defined for image areas so that the control participates in the tab order of
its parent.</para>
					</listItem>

					<listItem>
						<para>Image areas can be enabled or disabled.</para>
					</listItem>

					<listItem>
						<para>The action can be set to fire a <codeInline>Click</codeInline> event or to do nothing and just
display a tool tip if one is specified.</para>
					</listItem>

					<listItem>
						<para>When set to fire the <codeInline>Click</codeInline> event, the event handler receives the index
of the clicked area and the coordinates of the click.</para>
					</listItem>

					<listItem>
						<para>The control uses double-buffering for a smooth, flicker-free display.</para>
					</listItem>

					<listItem>
						<para>The Windows Forms control provides an additional <codeInline>ImageAreaEllipse</codeInline>
image area to make it easy to define elliptical image areas.</para>
					</listItem>

					<listItem>
						<para>The image map and image areas support owner draw mode to allow you to totally customize the
display of the image map or individual image areas.  Image areas can be set to owner draw mode even if the image
map itself is not.</para>
					</listItem>

					<listItem>
						<para>You can define event handlers on the image map to provide generic handling of mouse and focus
events for all image areas.  In addition, the image map will forward all mouse and focus events to the image
areas so that you can handle the events individually by connecting the appropriate event handlers to the image
areas themselves.</para>
					</listItem>
				</list>

			</content>
		</section>

		<section address="GAC">
			<title>Installing the Assemblies in the Global Assembly Cache</title>
			<content>
				<para>The <codeInline>EWSoftware.ImageMaps</codeInline> assemblies have strong names.  As such, you can
install the assemblies in the Global Assembly Cache (GAC) if so desired.  To do so, use the
<application>GACUTIL</application> command line tool as follows replacing the path to the assemblies to match the
installed location on your system:</para>

				<code language="none">
					gacutil -i \GH\ImageMaps\Deployment\EWSoftware.ImageMaps.Web.Controls.dll
					gacutil -i \GH\ImageMaps\Deployment\EWSoftware.ImageMaps.Windows.Forms.dll
				</code>

				<para>To remove the assemblies from the Global Assembly Cache, use the <application>GACUTIL</application>
command line tool as follows:</para>

				<code language="none">
					gacutil -u EWSoftware.ImageMaps.Web.Controls
					gacutil -u EWSoftware.ImageMaps.Windows.Forms
				</code>

			</content>
		</section>

		<section address="Install">
			<title>Installing the Controls in the Visual Studio Toolbox</title>
			<content>
				<para>Installing the controls in the Visual Studio toolbox will allow you to use the controls at design
time by dragging them from the toolbox and dropping them on to your form.  To install them for the first time or
to refresh the toolbox after the control assemblies have been updated, do the following:</para>

				<list class="bullet">
					<listItem>
						<para>Open the toolbox window.  Right click on it and select the <ui>Show All</ui> option.</para>
					</listItem>

					<listItem>
						<para>If you do not currently have a tab for the control library, create one by right clicking on the
toolbox window, selecting <ui>Add Tab</ui>, and then typing in a name for the tab such as <legacyBold>EWSoftware
Image Map Controls</legacyBold>.</para>
					</listItem>

					<listItem>
						<para>Click on the tab for the control library so that it is selected.</para>
					</listItem>

					<listItem>
						<para>If the tab is not empty, remove the existing controls by doing the following:</para>

						<list class="bullet">
							<listItem>
								<para>Right click on the toolbox tab and select <ui>Choose Items...</ui>.</para>
							</listItem>

							<listItem>
								<para>In the dialog box that opens, select the <ui>.NET Framework Components</ui> tab.  Click on
the <ui>Namespace</ui> header to sort the list of controls by namespace.</para>
							</listItem>

							<listItem>
								<para>Locate the <codeInline>EWSoftware.ImageMaps</codeInline> namespaces and uncheck all of the
controls in those namespaces.</para>
							</listItem>

							<listItem>
								<para>Click the <ui>OK</ui> button and the controls will be removed from the toolbox.  You are
now ready to add the new version of the control library.</para>
							</listItem>
						</list>
					</listItem>

					<listItem>
						<para>To add the controls to the toolbox tab, do the following:</para>
						
						<list class="bullet">
							<listItem>
								<para>Right click on the toolbox tab and select <ui>Choose Items...</ui>.</para>
							</listItem>

							<listItem>
								<para>In the dialog box that opens, select the <ui>.NET Framework Components</ui> tab.  Click on
the <ui>Namespace</ui> header to sort the list of controls by namespace.</para>
							</listItem>

							<listItem>
								<para>Click on the <ui>Browse</ui> button and navigate to where the <localUri>EWSoftware.ImageMaps.Web.Controls.dll</localUri>
and <localUri>EWSoftware.ImageMaps.Windows.Forms.dll</localUri> assemblies are stored.  Select one and click the
<ui>Open</ui> button.  This will add the controls in the assembly to the list in the dialog box.  They will all
be selected and checked by default.  Repeat this step for the other assembly.</para>
							</listItem>

							<listItem>
								<para>Click the <ui>OK</ui> button to complete the process and the new controls will appear in
the toolbox tab.</para>
							</listItem>
						</list>
					</listItem>
				</list>

				<para>Note that both controls are called <codeInline>ImageMap</codeInline> so you may want to put each
one in its own tab or right click on them and use the <ui>Rename</ui> option to change their names to their fully
qualified namespace to keep them straight.  However, this is not a necessity as when developing a web project,
the Windows Forms control will be disabled in the toolbox and when developing a Windows Forms application, the
web control will be disabled in the toolbox.</para>

			</content>
		</section>

		<section address="UseAsm">
			<title>Using the Assemblies in Your Projects</title>
			<content>
				<alert class="tip">
					<para>NuGet packages are available for both the web server and Windows Forms controls.  Search for the
package names <localUri>EWSoftware.ImageMap.Web</localUri> and <localUri>EWSoftware.ImageMap.WinForms</localUri>.</para>
				</alert>

				<para>The web server classes can be found in the assembly <localUri>EWSoftware.ImageMaps.Web.Controls.dll</localUri>.
The Windows Forms classes can be found in the <localUri>EWSoftware.ImageMaps.Windows.Forms.dll</localUri>
assembly.  In order to use the classes, add a reference to the appropriate assembly in your project.  To add the
reference, open your project in Visual Studio, open the <ui>Solution Explorer</ui> pane of the project, right
click on the <ui>References</ui> folder, select <ui>Add Reference...</ui>, click the <ui>Browse</ui> button and
navigate to the folder in which you placed the assemblies, and finally select the <localUri>EWSoftware.ImageMaps.Web.Controls.dll</localUri>
or <localUri>EWSoftware.ImageMaps.Windows.Forms.dll</localUri> assembly and click <ui>OK</ui> to close the
dialogs and add the reference.</para>

				<para>In code modules that use classes from the <codeInline>EWSoftware.ImageMaps</codeInline> namespaces,
you will have to add a <codeInline>using</codeInline> statement (<codeInline>Imports</codeInline> in VB.NET) for
one or more of the following namespaces:</para>

				<list class="bullet">
					<listItem>
						<para><codeInline>EWSoftware.ImageMaps</codeInline> (Common classes, events, etc.)</para>
					</listItem>
					<listItem>
						<para><codeInline>EWSoftware.ImageMaps.Web.Controls</codeInline> (Web control classes)</para>
					</listItem>
					<listItem>
						<para><codeInline>EWSoftware.ImageMaps.Windows.Forms</codeInline> (Windows Forms classes)</para>
					</listItem>
				</list>

			</content>
		</section>

		<section address="Demos">
			<title>Demonstration Applications</title>
			<content>
				<para>Web and Windows Forms applications in C# and VB.NET are provided that demonstrate the basic use of
the image map controls.  The web applications show the various features of the web server image map control such
as navigation, calling JavaScript, posting back to fire the server-side <codeInline>Click</codeInline> event,
etc.  The Windows Forms applications show off the various capabilities of the Windows Forms image map control.
The main form uses an owner drawn image map and image areas to demonstrate the owner drawn capabilities of the
image areas (focused areas, disabled areas, hot lighting, etc.) as well as the event handling abilities of the
individual image areas (mouse and focus events).  A second form presents an image map control and a property grid
in which you can modify the image map's properties at runtime to try out its various features.  The demo is set
up with a default image and some image areas but you can change the image and redefine the areas to see what the
control can do.  This includes using the collection editor and visual coordinate selection tool.</para>

				<para>To try out the demo web applications, open the projects in Visual Studio.  Once built, they are set
up to run using the development web server.  The startup page in each is <localUri>Default.aspx</localUri>.  If
you are using a remote server, you will need to set up the virtual directories and copy the demo application
files to the server locations.</para>

			</content>
		</section>

		<relatedTopics>
			<link xlink:href="562d9967-e690-4042-b9d6-f6db567c1c29" />
			<link xlink:href="5f8d60e8-3767-47f9-92af-8570d42d5e37" />
			<link xlink:href="ad1fd96f-bab4-4925-b620-29b634cfc4b0" />
		</relatedTopics>

	</developerConceptualDocument>
</topic>
